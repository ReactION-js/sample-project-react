{"version":3,"sources":["components/TimerInput.js","components/StartButton.js","components/Timer.js","components/Entry.js","components/Event.js","components/App.js","serviceWorker.js","index.js"],"names":["TimerInput","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","seconds","Component","StartButton","onClick","shouldStartTimer","buttonLabel","Timer","components_TimerInput","components_StartButton","Entry","_this","text","removeEvent","slot","Event","state","val","handleInput","bind","assertThisInitialized","e","setState","target","value","_this2","arr","events","map","el","id","components_Entry","key","onChange","addEvent","App","eventsArray","handleSeconds","handleInterval","preventDefault","setInterval","clearInterval","concat","toConsumableArray","console","log","newArray","filter","idx","className","components_Timer","components_Event","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8623f5b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TimerInput extends Component {\n  constructor(props){\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        TIMER<br/>\n        Seconds: {this.props.seconds}\n\n      </div>\n    )\n  }\n}\n\nexport default TimerInput;\n","import React, { Component } from 'react';\n\nclass StartButton extends Component {\n  constructor(props){\n    super(props);\n  }\n\n  render() {\n    \n    return (\n      <div>\n        <button onClick={this.props.shouldStartTimer}>{this.props.buttonLabel}</button>\n      </div>\n    )\n  }\n}\n\nexport default StartButton;","import React, { Component } from 'react';\nimport TimerInput from './TimerInput';\nimport StartButton from './StartButton';\n\nclass Timer extends Component {\n  constructor(props){\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <TimerInput seconds={this.props.seconds} />\n        <StartButton shouldStartTimer={this.props.shouldStartTimer} buttonLabel={this.props.buttonLabel} />\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import React, { Component } from 'react';\n\nclass Entry extends Component {\n  constructor(props){\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <p>{this.props.text} event</p>\n        <button onClick={() => this.props.removeEvent(this.props.slot)}>Remove button</button>\n      </div>\n    )\n  }\n}\n\nexport default Entry;\n\n","import React, { Component } from 'react';\nimport Entry from './Entry';\n\nclass Event extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      val: ''\n    }\n    this.handleInput=this.handleInput.bind(this);\n  }\n  handleInput(e) {\n    this.setState({\n      val: e.target.value\n    })\n  }\n  render() {\n    const events = this.props.events;\n    const arr = events.map((el, id) => <Entry key={id} slot={id} text={el} removeEvent={this.props.removeEvent}/>)\n    return (\n      <div>\n        TEST <br/>\n        <input onChange={this.handleInput}></input>\n        <button onClick={() => this.props.addEvent(this.state.val)}>Add Event</button>\n        {arr}\n      </div>\n    )\n  }\n}\n\nexport default Event;","import React, { Component } from 'react';\nimport './App.css';\nimport Timer from './Timer';\nimport Event from './Event';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      seconds: 0,\n      shouldStartTimer: false,\n      buttonLabel: 'Off',\n      eventsArray: [],\n\n    }\n    this.shouldStartTimer = this.shouldStartTimer.bind(this);\n    this.buttonLabel = this.buttonLabel.bind(this);\n    this.handleSeconds = this.handleSeconds.bind(this);\n    this.handleInterval = null;\n    this.addEvent = this.addEvent.bind(this);\n    this.removeEvent = this.removeEvent.bind(this);\n\n  }\n\n  shouldStartTimer(e) {\n    e.preventDefault();\n    this.setState ({\n      shouldStartTimer: !this.state.shouldStartTimer,\n    })\n    this.buttonLabel();\n    this.handleSeconds();\n  }\n\n\n\n  buttonLabel() {\n    if (this.state.shouldStartTimer) {\n      this.setState({\n        buttonLabel: 'On',\n      })\n    } else {\n      this.setState({\n        buttonLabel: 'Off',\n      })\n    }\n  }\n\n  handleSeconds() {\n      if (this.state.shouldStartTimer) {\n        this.handleInterval = setInterval(() => {\n          this.setState({\n            seconds: this.state.seconds + 1,\n          })\n        }, 1000)\n      } else {\n        clearInterval(this.handleInterval);\n      }\n  }\n\n  addEvent(val) {\n    this.setState({\n      eventsArray: [...this.state.eventsArray, val]\n    })\n    // console.log(this.state.eventsArray)\n  }\n\n  removeEvent(id) {\n    console.log(this.state.eventsArray)\n    const arr = this.state.eventsArray;\n    const newArray = arr.filter((el, idx) => idx !== id);\n    this.setState({\n      eventsArray: newArray\n    })\n  }\n\n\n  render() {\n    return (\n\n      <div className=\"App\">\n        <Timer seconds={this.state.seconds} shouldStartTimer={this.shouldStartTimer} buttonLabel={this.state.buttonLabel} />\n        <Event events={this.state.eventsArray} addEvent={this.addEvent} removeEvent={this.removeEvent}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}